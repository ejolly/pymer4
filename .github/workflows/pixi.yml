name: Pixi Run Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      upload_anaconda:
        description: 'Upload build to anaconda?'
        required: false
        default: 'skip'
        type: choice
        options:
          - 'skip'
          - 'pre-release'
          - 'main'

jobs:
  pixi-test-and-docs:

    runs-on: ubuntu-latest
    env:
      ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.45.0
          cache: true

      # Always run linting, tests, and build docs
      - name: Pixi Check Errors & Formatting
        run: | 
         pixi run lint

      - name: Pixi Run Tests & Build Docs
        run: | 
         pixi run test-install
         pixi run tests
         pixi run docs-build

       # upload built docs on direct push to main
      - name: upload artifact
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docs/_build/html"

      - name: Deploy to GitHub Pages
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        id: deployment
        uses: actions/deploy-pages@v4

      # always build pip and conda packages
      - name: Pixi Build Conda & Pip Packages
        run: |
          pixi run build-pip
          pixi run build

      # upload test pypi on non-release pushes
      - name: Upload Test PyPi?
        if: ${{ github.event_name != 'release' || inputs.upload_anaconda == 'pre-release' }}
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          verbose: true
          repository-url: https://test.pypi.org/legacy/
          attestations: false
          skip-existing: true

      # upload real pypi on release or when manually triggered
      - name: Upload Real PyPi?
        if: ${{ github.event_name == 'release' || inputs.upload_anaconda == 'main' }}
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          skip-existing: true

      # Run this from within the pixi env by shelling in
      # because passing ANACONDA_TOKEN to pixi run upload-*
      # tasks wasn't working
      - name: Upload to Anaconda Pre-release?
        if: ${{ github.event_name != 'release' || inputs.upload_anaconda == 'pre-release' }}
        shell: pixi run bash -e {0}
        run: |
          upload_file=$(pixi run build-output)
          anaconda -t $ANACONDA_TOKEN upload $upload_file -l "pre-release"

      - name: Upload to Anaconda Main?
        if: ${{ github.event_name == 'release' || inputs.upload_anaconda == 'main' }}
        shell: pixi run bash -e {0}
        run: |
          upload_file=$(pixi run build-output)
          anaconda -t $ANACONDA_TOKEN upload $upload_file

  # After the the main job is done we test the install on a variety
  # of OSs and Python versions using the built package on pre-release label
  test-built-install:
    needs: pixi-test-and-docs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        py_ver: ['3.10', 3.11, 3.12]
        os: [ubuntu-latest, macos-latest]
    env:
      ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.py_ver }}
        channels: conda-forge,defaults
        channel-priority: strict
        activate-environment: build-env
        auto-activate-base: false

    - name: Test install
      shell: bash -el {0}
      run: | 
        conda config --set always_yes yes
        conda install pymer4 -c ejolly/label/pre-release -c conda-forge
        python -c "from pymer4 import test_install; test_install()"